#! /bin/sh
### BEGIN INIT INFO
# Provides:          my-bindfs-mounts
# Required-Start:    $local_fs $remote_fs vboxdrv vboxnet
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Create custom bindings
# Description:       Create custom bindings of folders into other place
### END INIT INFO

# Author: Daniel Dalgo <dalguete@gmail.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin
DESC="Create custom bindings"
NAME=my-bindfs-mounts
BINDFS=/usr/bin/bindfs
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$BINDFS" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	# Count mounts
	mounts=`$NAME -l | wc -l`

	if [ "$mounts" != "0" ]; then
	  echo "$DESC" was already executed.

	  return 1
	fi

  # Mount all from config file
	local ERRORS="$($NAME --load-from-file /etc/default/$NAME 2>&1)"

  if [ -n "$ERRORS" ]; then
		echo "$DESC could not be started (maybe incomplete activations)..."
		echo $ERRORS

		return 2
  fi

	# Message
	echo "$DESC" started.

	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred

	# Count mounts
	mounts=`$NAME -l | wc -l`

	if [ "$mounts" = "0" ]; then
	  echo "$DESC" is already stopped.

	  return 1
	fi

	# Umount all
	$NAME --umount-all	

	# Message
	echo "$DESC" stopped.

	return 0	
}

#
# Display "State" field from showinfo action
#
do_status()
{
	# Count mounts
 	mounts=$( $NAME -l | wc -l )

	# Message
	echo "..." $mounts "bindfs mount(s) ..."
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  status)
	do_status
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|status}" >&2
	exit 3
	;;
esac
