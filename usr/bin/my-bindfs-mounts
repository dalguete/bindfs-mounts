#!/bin/sh

# Script used to handle the mount/umount of bindfs items
# Author: Daniel Dalgo <dalguete@gmail.com>

# Main vars
OPTIONS=
MAIN_FUNCTION=
MAIN_CONFIG_FUNCTION=

# File to load
LOAD_FROM_FILE=

# Secondary var
ERROR_ON_MOUNT=

# Config file location
CONFIG_FILE=/etc/default/my-bindfs-mounts

# Function used to print the usage message
print_usage()
{
	echo >&2 \
	" usage: $0 [-l]\n" \
	"usage: $0 [--load-from-file [FILENAME]]\n" \
	"usage: $0 [--umount-all]\n" \
	"usage: $0 [-m [-i|-r] [-o OPTIONS] SOURCE DESTINATION]\n" \
	"usage: $0 [-u [-r] DIR1 [DIR2 ...]]\n" \
	"usage: $0 [-i [-o OPTIONS] SOURCE DESTINATION]\n" \
	"usage: $0 [-r DIR1 [DIR2 ...]]"

	exit 1
}

# Function used to set the main function to perform
is_main_function_set(){
	if [ "$MAIN_FUNCTION" != "" ]; then
		print_usage
	fi
}

# Function used to set the main config function to perform
is_main_config_function_set(){
	if [ "$MAIN_CONFIG_FUNCTION" != "" ]; then
		print_usage
	fi
}

# Function used to ensure there are no conflicts in the logic of parameters passed
check_conflicts(){
	if [ "$MAIN_FUNCTION" = "listing" ] && [ "$MAIN_CONFIG_FUNCTION" != "" ]; then
		print_usage
	fi

	if [ "$MAIN_FUNCTION" = "loadFromFile" ] && [ "$MAIN_CONFIG_FUNCTION" != "" ]; then
		print_usage
	fi

	if [ "$MAIN_FUNCTION" = "umountAll" ] && [ "$MAIN_CONFIG_FUNCTION" != "" ]; then
		print_usage
	fi

	if [ "$MAIN_FUNCTION" = "umounting" ] && [ "$MAIN_CONFIG_FUNCTION" = "inserting" ]; then
		print_usage
	fi
}

# Parse all the arguments passed to the program
# TEMP needed as the `eval set --' would nuke the return value of getopt.
TEMP=`getopt -o lmuo:ir -l load-from-file::,umount-all -q -- "$@"`

if [ $? != 0 ] ; then 
	print_usage
fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

# Set a param as default
if [ $1 = "--" ] ; then 
	eval set -- "-l $TEMP"
fi

# Process all input data
while [ $# -gt 0 ]
do
	case "$1" in
		-l)	# List all mounts
			is_main_function_set
			MAIN_FUNCTION="listing";;

		--load-from-file)	# Mount all stuff defined in a file (config file by default)
			is_main_function_set

			# Set the file to be loaded
		  LOAD_FROM_FILE=$CONFIG_FILE
			if [ -f "$4" -a -r "$4" -a -s "$4" ]
			then
				LOAD_FROM_FILE="$4"
			fi

			# Consume the argument
		  shift

			MAIN_FUNCTION="loadFromFile";;

		--umount-all)	# Umount any bindfs mounts in place
			is_main_function_set
			MAIN_FUNCTION="umountAll";;

		-m)  	# Perform a mount
			is_main_function_set
			MAIN_FUNCTION="mounting";;

		-o)  	# Set the options for the mount
			OPTIONS="$2"
			shift;;

		-u)  	# Perform an umount
			is_main_function_set
			MAIN_FUNCTION="umounting";;

		-i)  	# Insert/Update the mounted item entry in the config file 
			is_main_config_function_set
			MAIN_CONFIG_FUNCTION="upserting";;

		-r)  	# Remove the mounted item entry in the config file 
			is_main_config_function_set
			MAIN_CONFIG_FUNCTION="removing";;

		--)	shift 
			break;;

		-*)	# Unknown flag
			print_usage;;

		*)	# Terminate while loop
			break;;
  esac

  shift
done

# Ensure there are no conflicts in the logic of parameters passed
check_conflicts

# Function used to print the list of mounts
listing()
{
	# Display an error message in case non-args passed
	if [ $# -ne 0 ]; then
		print_usage
	fi

	# List the mounts
	mount -t fuse.bindfs | grep -e '\/.*' -o | sed 's/type\sfuse\.bindfs.*$//g'
}

# Function used to load all mounts as defined in a file (config file by default)
loadFromFile()
{
	# Mount entries from file
	while read line
	do  
	  my_line=`echo $line | grep -e ^# -v`

	  if [ -n "$my_line" ]; then
			eval "/usr/bin/bindfs $my_line >> /tmp/my-bindfs-mounts-error 2>&1"
	  fi
	done < $LOAD_FROM_FILE
	
	# Check the error file exists and has something to say
	if [ -f /tmp/my-bindfs-mounts-error -a -s /tmp/my-bindfs-mounts-error ]; then
		# Error message
		cat /tmp/my-bindfs-mounts-error 1>&2

		# Remove error log file
		rm /tmp/my-bindfs-mounts-error
	
		exit 1
	fi

  # Remove error log file
  rm /tmp/my-bindfs-mounts-error
}

# Function used umount all bindfs mounts
umountAll()
{
	umount -t fuse.bindfs -a > /dev/null
}

# Function used to create a mount
mounting()
{
	# Display an error message in case non-args not passed
	if [ $# -ne 2 ]; then
		print_usage
	fi	

	# Load the source and destination items
	local source="$1"
	local destination="$2"

	# Do the mount
	if [ "$OPTIONS" = "" ]; then
		bindfs "$source" "$destination"
	else		
		bindfs $OPTIONS "$source" "$destination"
	fi

	# Store the error code, if any
	ERROR_ON_MOUNT=$?
}

# Function used to remove a mount
umounting()
{
	# Display an error message in case non-args not passed
	if [ $# -eq 0 ]; then
		print_usage
	fi

	# Umount item by item
	local items="$1"
	for items do
		fusermount -u "$items"
	done
}

# Function used to insert/update an entry in the config file
upserting()
{
	# Do something only if no error mounts detected
	if [ "$ERROR_ON_MOUNT" != "" ] && [ $ERROR_ON_MOUNT -gt 0 ]; then
		echo "Previous error on mount prevents config file modification"
		exit $ERROR_ON_MOUNT
	fi

	# Display an error message in case non-args not passed
	if [ $# -ne 2 ]; then
		print_usage
	fi	

	# Load the source and destination items. Each one of them are expanded
	# to create a canonical version
	local source="\"`readlink -m "$1"`\""
	local destination="\"`readlink -m "$2"`\""

	# Mix the Options and Source parts
	mix=

	if [ "$OPTIONS" = "" ]; then
		mix="$source"
	else		
		mix="$OPTIONS $source"
	fi

	# Try to find a valid match
	cat $CONFIG_FILE | grep "$destination" > /dev/null
	ERROR_CODE=$?

	# Act accordingly depending on matches found
	case $ERROR_CODE in
		0)	# Match Found
			# Escape all necessary chars before use them in sed
			mix_escaped=$(echo "$mix" | sed -e 's/[]\/()$*.^|[]/\\&/g')
			destination_escaped=$(echo "$destination" | sed -e 's/[]\/()$*.^|[]/\\&/g')

			# Do the replace
			sed -i "s/^.*$destination_escaped\$/$mix_escaped $destination_escaped/" $CONFIG_FILE 2> /dev/null
			ERROR_CODE=$?
			if [ $ERROR_CODE != 0 ]; then
				echo "The config file could not be modified"
				exit $ERROR_CODE
			fi;;

		1)  	# No Match Found
			# Add a new one
			sed -i "$ a $mix $destination" $CONFIG_FILE 2> /dev/null
			ERROR_CODE=$?
			if [ $ERROR_CODE != 0 ]; then
				echo "The config file could not be modified"
				exit $ERROR_CODE
			fi;;

		*)	# Error ocurred
			echo "The config file could not be read"
			exit $ERROR_CODE;;
    	esac
}

# Function used to remove one or more entries in the config file
removing()
{
	# Do something only if no error mounts detected
	if [ "$ERROR_ON_MOUNT" != "" ] && [ $ERROR_ON_MOUNT -gt 0 ]; then
		echo "Previous error on mount prevents config file modification"
		exit $ERROR_ON_MOUNT
	fi

	# Display an error message in case non-args not passed
	if [ $# -eq 0 ]; then
		print_usage
	fi

	# Get items to use, depending on actions performed
	local items=
	if [ "$ERROR_ON_MOUNT" != "" ]; then
		# Mount action performed previously
		items="$2"
	else
		# Umount action performed previously, or direct remove
		items="$@"
	fi

	# Loop through all item to remove all of them from config file
	for items do
		# Get a canonized destination path
		local destination="\"`readlink -m "$items"`\""

		# Escape all necessary chars before use them in sed
		destination_escaped=$(echo "$destination" | sed -e 's/[]\/()$*.^|[]/\\&/g')

		# Do the remotion		
		sed -i "/$destination_escaped\$/d" $CONFIG_FILE 2> /dev/null
		ERROR_CODE=$?
		if [ $ERROR_CODE != 0 ]; then
			echo "The config file could not be modified"
			exit $ERROR_CODE
		fi
	done
}

# Call to the main function set, passing the rest of data (the non-args)
if [ "$MAIN_FUNCTION" != "" ]; then
	$MAIN_FUNCTION "$@"
fi

if [ "$MAIN_CONFIG_FUNCTION" != "" ]; then
	$MAIN_CONFIG_FUNCTION "$@"
fi

